# -*- coding: utf-8 -*-
"""AirBNB_analysis_EDA_Capstone_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yfAsiNsi8HQsf7gwDGBJO1lHEcdtzkjW
"""

!pip install pandas_profiling

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import plotly.express as px
from pandas_profiling import ProfileReport

import warnings
warnings.filterwarnings(action="ignore")

airbnb=pd.read_excel("/content/airbnb prices.xlsx")

report=ProfileReport(airbnb,explorative=True)
report.to_file("airbnb_report.html")

airbnb.shape

airbnb.head()

airbnb.info()

airbnb.describe()

plt.figure(figsize=(10,6))
sns.heatmap(airbnb.isnull(),yticklabels=False)

airbnb.isnull().sum()

airbnb["country"].fillna(value="Netharland",inplace=True)
airbnb["country"].isnull().sum()

airbnb["borough"].fillna(value="centrum",inplace=True)
airbnb["borough"].isnull().sum()

airbnb["minstay"].fillna(value="1 day",inplace=True)
airbnb["minstay"].isnull().sum()

airbnb["name"].value_counts()

airbnb["name"].fillna(value="aparment/shared room/private room",inplace=True)
airbnb["name"].isnull().sum()

airbnb.head()

airbnb.apply(lambda x:len(x.unique()))

top_earners=airbnb.groupby(["name"])["price"].mean().reset_index().sort_values(by="price",ascending=False)

top_earners=top_earners[0:20]
top_earners

plt.figure(figsize=(12,5))
sns.barplot(x="name",y="price",data=top_earners)
plt.xticks(rotation=60)
for i,data in enumerate(top_earners["price"]):
    plt.text(x=i,y=data+29,s=f"{data}",ha="center")
plt.title("Top earners w.r.t. Name(Amenities) and Price ")
plt.xlabel("Host OR Amenities ")
plt.ylabel("Average earnings")
plt.show()

maxbook=airbnb["neighborhood"].value_counts().reset_index()[0:10]
maxbook.columns=["neighbor","count"]
maxbook

plt.figure(figsize=(5,5))
plt.pie(x="count",labels="neighbor",data=maxbook,autopct="%0.2f%%",startangle=0)
plt.title("Maxbooking w.r.t neighborhood ")
plt.show()

maxbooking=airbnb.groupby(["location"])["reviews"].mean().reset_index().sort_values(by="reviews",ascending=False)
maxbooking=maxbooking[0:10]
maxbooking

plt.figure(figsize=(12,5))
sns.barplot(x="location",y="reviews",data=maxbooking)
plt.xticks(rotation=60)
plt.title("Maxbooking w.r.t. location and reviews ")
plt.show()

maxbooking1=airbnb.groupby(["name"])["reviews"].mean().reset_index().sort_values(by="reviews",ascending=False)
maxbooking1=maxbooking1[0:10]
maxbooking1

plt.figure(figsize=(12,5))
sns.barplot(x="name",y="reviews",data=maxbooking1)
for i,data in enumerate(maxbooking1["reviews"]):
    plt.text(x=i,y=data+29,s=f"{data}",ha="center",va="top")
plt.xticks(rotation=60)
plt.title("Maxbooking w.r.t. Name and Reviews ")
plt.show()

price_location=airbnb.groupby(["location"])["price"].mean().reset_index().sort_values(by="price",ascending=False)[0:10]
price_location

plt.figure(figsize=(14,5))
sns.lineplot(x="location",y="price",data=price_location)
plt.xticks(rotation=60)
for i,data in enumerate(price_location["price"]):
    plt.text(x=i,y=data+29,s=f"{data}",ha="center",va="bottom")
plt.title("location and price")
plt.show()

plt.figure(figsize=(14,5))
sns.lineplot(x="location",y="price",data=price_location)
plt.xticks(rotation=60)
for i,data in enumerate(price_location["price"]):
    plt.text(x=i,y=data+29,s=f"{data}",ha="center",va="bottom")
plt.title("location and price")
plt.show()

price_neighbor=airbnb.groupby(["neighborhood"])["price"].mean().reset_index().sort_values(by="price",ascending=False)
price_neighbor=price_neighbor.round(decimals=2)
price_neighbor

plt.figure(figsize=(12,5))
sns.stripplot(x="neighborhood",y="price",data=price_neighbor)
plt.xticks(rotation=60)
plt.title("Relationship between neighborhood(location) and Average price ")
plt.show()

price_neighbor_scatter=airbnb[["neighborhood","price"]].sort_values(by="price",ascending=False)
price_neighbor_scatter

plt.figure(figsize=(12,5))
sns.scatterplot(x="neighborhood",y="price",data=price_neighbor_scatter)
plt.xticks(rotation=300)
plt.title("Relationship between neighborhood(location) and price ")
plt.show()

price_quality=airbnb.groupby(["price"])["overall_satisfaction"].mean().reset_index().sort_values(by="overall_satisfaction",ascending=True)
price_quality=price_quality[0:]
price_quality

plt.figure(figsize=(12,5))
sns.scatterplot(x="price",y="overall_satisfaction",data=price_quality)
plt.xticks(rotation=60)
plt.title("Relationship between Quality and price ")
plt.show()

airbnb.head()

airbnb.head()

room_neighborhood=airbnb.groupby(["room_type","neighborhood"])["price"].agg("mean").reset_index().sort_values( by="price",ascending=False)[0:60]
room_neighborhood=room_neighborhood.round(decimals=2)
room_neighborhood

plt.figure(figsize=(22,9))
sns.barplot(x="neighborhood",y="price",data=room_neighborhood,hue="room_type")
plt.xticks(rotation=90)
plt.title("Location(neighborhood) and room_type vs Avg.price ",fontweight="bold",fontsize=16)
plt.xlabel("Neighborhood",fontsize=12,fontweight="bold")
plt.ylabel("Price",fontsize=12,fontweight="bold")
plt.legend(title="Room Type",fontsize=12,loc="upper right")
plt.show()

room_count=airbnb["room_type"].value_counts().reset_index()
room_count.columns=["room type","count"]
room_count

plt.figure(figsize=(10,5))
sns.barplot(x="room type",y="count",data=room_count)
plt.xticks(rotation=10)
plt.title("Preference of room_type ",fontweight="bold",fontsize=10)
plt.xlabel("Room Type",fontsize=8,fontweight="bold")
plt.ylabel("Count",fontsize=8,fontweight="bold")
for i,data in enumerate(room_count["count"]):
    plt.text(x=i,y=data+29,s=f"{data}",ha="center",va="bottom")

cheap_airbnb=airbnb.groupby(["name"])["price"].mean().reset_index().sort_values(by="price",ascending=True)
cheap_airbnb=cheap_airbnb[0:20]
cheap_airbnb

plt.figure(figsize=(10,5))
sns.barplot(x="price",y="name",data=cheap_airbnb)
plt.xticks(rotation=90)
plt.title("Cheapast Airbnb property ",fontweight="bold",fontsize=10)

expe_airbnb=airbnb.groupby(["name"])["price"].mean().reset_index().sort_values(by="price",ascending=False)
expe_airbnb=expe_airbnb[0:20]
expe_airbnb

plt.figure(figsize=(10,5))
sns.barplot(x="price",y="name",data=expe_airbnb)
plt.xticks(rotation=90)
plt.title("Expensive Airbnb property ",fontweight="bold",fontsize=10)

